# nonsense.ws domain

server {
    listen  443 ssl http2;

    ssl_certificate /etc/letsencrypt/live/nonsense.ws/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/nonsense.ws/privkey.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

    server_name nonsense.ws;

    root /home/overlord/nonsense/;
    index index.html;

    # Only requests to our Host are allowed
    if ($host !~ ^(nonsense.ws)$ ) {
        return 444;
    }

    # Any route containing a file extension (e.g. /devicesfile.js)
    location ~ ^.+\..+$ {
        try_files $uri =404;
    }

    # Any route that doesn't have a file extension (e.g. /devices)
    location / {
        try_files $uri /index.html;
    }

    # Allow file uploads
    client_max_body_size 100M;

    location /ws/ {
        proxy_pass http://overlords;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    location /login/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /logout/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /outbound/ {
        proxy_pass http://howlers;
        proxy_set_header Host $host;
    }

    location /contacts/ {
        proxy_pass http://howlers;
        proxy_set_header Host $host;
    }

    location /directories/ {
        proxy_pass http://howlers;
        proxy_set_header Host $host;
    }

    location /upload/ {
        proxy_pass http://overlords;
        proxy_set_header Host $host;
    }

    location /campaigns/ {
        proxy_pass http://howlers;
        proxy_set_header Host $host;
    }

    location /alerts/ {
        proxy_pass http://howlers;
        proxy_set_header Host $host;
    }

    location /users/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /billings/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /records/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /reports/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /tasks/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /routes/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /orgs/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location = /favicon.ico {
        rewrite (.*) /static/img/favicon.ico;
    }

    location = /robots.txt {
        rewrite (.*) /static/robots.txt;
    }

    location = /humans.txt {
        rewrite (.*) /static/humans.txt;
    }
}

server {
    listen 443 ssl http2;

    ssl_certificate /etc/letsencrypt/live/nonsense.ws/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/nonsense.ws/privkey.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

    root /home/overlord/nonsense;
    index index.html index.htm;

    server_name www.nonsense.ws;
    rewrite ^/(.*) https://nonsense.ws/$1 permanent;
}

server {
    listen 80;
    server_name nonsense.ws;
    return 301 https://$host$request_uri;
}

server {
    listen 80;

    root /home/overlord/nonsense;
    index index.html index.htm;

    server_name www.nonsense.ws;
    rewrite ^/(.*) https://nonsense.ws/$1 permanent;
}

# cloud.nonsense.ws domain
server {
    listen  443 ssl http2;
    ssl_certificate /etc/letsencrypt/live/cloud.nonsense.ws/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cloud.nonsense.ws/privkey.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

    server_name cloud.nonsense.ws;

    # Only requests to our Host are allowed
    if ($host !~ ^(cloud.nonsense.ws)$ ) {
        return 444;
    }

    location / {
        root   /home/overlord/erebus/;
        index  index.html;
    }

    # Allow file uploads
    client_max_body_size 100M;

    location /ws/ {
        proxy_pass http://overlords;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    location /login/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /logout/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /outbound/ {
        proxy_pass http://howlers;
        proxy_set_header Host $host;
    }

    location /contacts/ {
        proxy_pass http://howlers;
        proxy_set_header Host $host;
    }

    location /directories/ {
        proxy_pass http://howlers;
        proxy_set_header Host $host;
    }

    location /upload/ {
        proxy_pass http://overlords;
        proxy_set_header Host $host;
    }

    location /campaigns/ {
        proxy_pass http://howlers;
        proxy_set_header Host $host;
    }

    location /alerts/ {
        proxy_pass http://howlers;
        proxy_set_header Host $host;
    }

    location /users/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /billings/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /records/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /reports/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /tasks/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /routes/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /orgs/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location = /favicon.ico {
        rewrite (.*) /static/img/favicon.ico;
    }

    location = /robots.txt {
        rewrite (.*) /static/robots.txt;
    }

    location = /humans.txt {
        rewrite (.*) /static/humans.txt;
    }
}

server {
    listen 80;
    server_name cloud.nonsense.ws;
    return 301 https://$host$request_uri;
}

# chaos.nonsense.ws domain
server {
    listen  443 ssl http2;
    ssl_certificate /etc/letsencrypt/live/chaos.nonsense.ws/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/chaos.nonsense.ws/privkey.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

    server_name chaos.nonsense.ws;

    # Only requests to our Host are allowed
    if ($host !~ ^(chaos.nonsense.ws)$ ) {
        return 444;
    }

    location / {
        root   /home/overlord/chaos/site/output/;
        index  index.html;
    }

    # Allow file uploads
    client_max_body_size 10M;

    location = /favicon.ico {
        rewrite (.*) /static/img/favicon.ico;
    }

    location = /robots.txt {
        rewrite (.*) /static/robots.txt;
    }

    location = /humans.txt {
        rewrite (.*) /static/humans.txt;
    }
}

server {
    listen 80;
    server_name chaos.nonsense.ws;
    return 301 https://$host$request_uri;
}