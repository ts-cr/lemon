
# greek subdomain

server {
    listen 80;

    root /home/overlord/grapefruit/sparta;
    index index.html index.htm;

    server_name sparta2.code.com;

    # Allow file uploads
    client_max_body_size 100M;

    location /ws/ {
        proxy_pass http://overlords;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    location /login/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /logout/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /nodes/ {
        proxy_pass http://overlords;
        proxy_set_header Host $host;
    }

    location /imps/ {
        proxy_pass http://overlords;
        proxy_set_header Host $host;
    }

    location /events/ {
        proxy_pass http://overlords;
        proxy_set_header Host $host;
    }

    #location /stochastics/ {
    #    proxy_pass http://cebus;
    #    proxy_set_header Host $host;
    #}

    #location /inbound/ {
    #    proxy_pass http://spiders;
    #    proxy_set_header Host $host;
    #}

    location /quests/ {
        proxy_pass http://spiders;
        proxy_set_header Host $host;
    }

    location /search/ {
        proxy_set_header Host $host;
        proxy_redirect off;

        client_max_body_size       10m;
        client_body_buffer_size    128k;

        proxy_connect_timeout      90;
        proxy_send_timeout         90;
        proxy_read_timeout         90;

        proxy_buffer_size          64k;     # If set to a smaller value,
                                            # nginx can complain with an
                                            # "too large headers" error
        proxy_buffers              4 64k;
        proxy_busy_buffers_size    64k;
        proxy_temp_file_write_size 64k;


        if ($request_method != GET) {
          return 405;
        }

        if ($request_method = GET) {
          proxy_pass http://riak_nodes;
        }
    }

    location /outbound/ {
        proxy_pass http://howlers;
        proxy_set_header Host $host;
    }

    location /contacts/ {
        proxy_pass http://howlers;
        proxy_set_header Host $host;
    }

    location /leads/ {
        proxy_pass http://grapes;
        proxy_set_header Host $host;
    }

    location /directories/ {
        proxy_pass http://howlers;
        proxy_set_header Host $host;
    }

    location /upload/ {
        content_by_lua '
            -- Lua the same goddess being called Luna in heaven, Diana on earth, and Phoebe in hell

            uuid.randomseed(socket.gettime()*10000)

            local context = zmq.init(1)
            local publisher = context:socket(zmq.PUB)
            local chunk_size = 4096
            local file
            local file_name
            local upload_uuid = uuid()
            local message
            local message_string
            local topic = "upload"
            local von_count = 1
            local stuff = {}
            local form, err = upload:new(chunk_size)

            publisher:connect("tcp://52.25.157.107:8899")

            if not form then
                ngx.log(ngx.ERR, "failed to new upload: ", err)
                ngx.exit(500)
            end

            while true do
                local typ, res, err = form:read()
                if not typ then
                    ngx.say("failed to read: ", err)
                    return
                end
                if typ == "header" then
                    file_name = uuid()
                    if file_name then
                        file = io.open("/tmp/" .. file_name, "w+")
                        stuff[von_count] = {uuid = file_name}
                        von_count = von_count + 1

                        if not file then
                            ngx.say("failed to open file ", file_name)
                            return
                        end
                    end

                elseif typ == "body" then
                    if file then
                        file:write(res)
                    end

                elseif typ == "part_end" then
                    file:close()
                    file = nil

                elseif typ == "eof" then
                    stuff["uuid"] = upload_uuid
                    message = cjson.encode(stuff)
                    message_string = string.format("%s %s", topic, message)
                    publisher:send(message_string)
                    ngx.say(message)
                    break

                else
                    -- do nothing
                end
            end
        ';
    }

    location /lua/ {

        lua_need_request_body on;

        default_type 'application/json';

        content_by_lua '

            -- Lua the same goddess being called Luna in heaven, Diana on earth, and Phoebe in hell

            local r = router.new()

            r:match({
                GET = {
                    ["/lua/hello"] = function(params)
                        ngx.say(cjson.encode({hello = "hello hello", ok = 21}))
                    end,

                    ["/lua/hello/:name"] = function(params)
                        ngx.print("hello, " .. params.name)
                    end
                }
            })

            local ok, errmsg = r:execute(
                ngx.var.request_method,
                ngx.var.request_uri,
                ngx.req.get_uri_args(),  -- all these parameters
                ngx.req.get_post_args(), -- will be merged in order
                {other_arg = 1}          -- into a single "params" table
            )

            if ok then
                ngx.status = 200
            else
                ngx.status = 404
                ngx.print("Not found!")
                ngx.log(ngx.ERROR, errmsg)
            end
        ';
    }

    # And then the moon said ...

    # Instead of proxy to spiders like on inbound/campaings

    # Insted of proxy to howlers like on outbound/campaings

    # This seems like a great oportunity to use the ngx.lua powers.

    # location /campaigns/ {}
    # location /campaigns/inbound/ {}
    # location /campaigns/outbound/ {}

    #location /campaigns/inbound/ {
    #    proxy_pass http://spiders;
    #    proxy_set_header Host $host;
    #}

    #location /campaigns/outbound/ {
    #    proxy_pass http://howlers;
    #    proxy_set_header Host $host;
    #}

    # but please finish first the rest of the stuff for the demo.

    # ok, chao.

    location /alerts/ {
        proxy_pass http://overlords;
        proxy_set_header Host $host;
    }

    location /notifications/ {
        proxy_pass http://overlords;
        proxy_set_header Host $host;
    }

    location /users/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /billings/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /records/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /reports/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /tasks/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location /calls/ {
        proxy_pass http://starfruits;
        proxy_set_header Host $host;
    }

    #location /companies/ {
    #    proxy_pass http://cualmex;
    #    proxy_set_header Host $host;
    #}

    location /orgs/ {
        proxy_pass http://mangos;
        proxy_set_header Host $host;
    }

    location = /favicon.ico {
        rewrite (.*) /static/img/favicon.ico;
    }

    location = /robots.txt {
        rewrite (.*) /static/robots.txt;
    }

    location = /humans.txt {
        rewrite (.*) /static/humans.txt;
    }
}

server {
    listen 80;

    root /home/overlord/grapefruit/sparta;
    index index.html index.htm;

    server_name www.codemachine.io;
    rewrite ^/(.*) htts://codemachine.io/$1 permanent;
}

