#!KAMAILIO
/*
    nonsense.ws hacked configuration script
    ---------------------------------------
*/


#!define WITH_NAT
#!define WITH_ODBC
#!define WITH_TLS
#!define WITH_AUTH
#!define WITH_USRLOCDB
#!define WITH_ASTERISK
#!define WITH_WEBSOCKETS


/*
    Defined Values
    --------------
*/

#!substdef "!IP_ADDR!{{ salt['pillar.get']('kamailio:network:address_1') }}!g"
#!substdef "!AST_ADDR!{{ salt['pillar.get']('kamailio:asterisk:address_1') }}!g"

#!substdef "!DOMAIN!{{ salt['pillar.get']('kamailio:network:domain') }}!g"
#!substdef "!SIP_PORT!{{ salt['pillar.get']('kamailio:network:sip_port') }}!g"
#!substdef "!SIPS_PORT!{{ salt['pillar.get']('kamailio:network:sips_port') }}!g"
#!substdef "!WS_PORT!{{ salt['pillar.get']('kamailio:network:ws_port') }}!g"
#!substdef "!WSS_PORT!{{ salt['pillar.get']('kamailio:network:wss_port') }}!g"
#!substdef "!MSRP_PORT!{{ salt['pillar.get']('kamailio:network:msrp_port') }}!g"

#!substdef "!WS_ADDR!tcp:IP_ADDR:WS_PORT!g"
#!substdef "!WSS_ADDR!tls:IP_ADDR:WSS_PORT!g"
#!substdef "!MSRP_ADDR!tls:IP_ADDR:MSRP_PORT!g"

#!substdef "!MSRP_MIN_EXPIRES!{{ salt['pillar.get']('kamailio:msrp:min_expires') }}!g"
#!substdef "!MSRP_MAX_EXPIRES!{{ salt['pillar.get']('kamailio:msrp:max_expires') }}!g"

#!substdef "!DATABASE_URL!{{ salt['pillar.get']('kamailio:settings:database') }}!g"
#!substdef "!AST_DATABASE_URL!{{ salt['pillar.get']('kamailio:asterisk:database') }}!g"
#!substdef "!FS_DATABASE_URL!{{ salt['pillar.get']('kamailio:freeswitch:database') }}!g"


#!ifdef WITH_ODBC
#!define DBURL "unixodbc://DATABASE_URL"

#!ifdef WITH_ASTERISK
#!define DBASTURL "unixodbc://AST_DATABASE_URL"
#!endif

#!ifdef WITH_FREESWITCH
#!define DBFSURL "unixodbc://FS_DATABASE_URL"
#!endif

#!endif


#!ifdef WITH_MULTIDOMAIN
# - the value for 'use_domain' parameters
#!define MULTIDOMAIN 1
#!else
#!define MULTIDOMAIN 0
#!endif

/*
    System Flags
    ------------
*/
#    FLT_ - per transaction (message) flags
#    FLB_ - per branch flags

#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

/*
    Global Parameters
    -----------------
*/

#!ifdef WITH_DEBUG
debug=4
log_stderror=no
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL0

fork=yes
children=4

tcp_accept_no_cl=yes

# -- uncomment the next line to disable TCP (default on)
#disable_tcp=yes

# -- uncomment the next line to disable the auto discovery of local aliases
#    based on reverse DNS on IPs (default on)
#auto_aliases=no

# -- add local domain aliases
alias=DOMAIN

# -- uncomment and configure the following line if you want Kamailio to 
#    bind on a specific interface/port/proto (default bind on all available)

listen=udp:{{ salt['pillar.get']('kamailio:network:local_address_1') }}:SIP_PORT advertise {{ salt['pillar.get']('kamailio:network:address_1') }}:SIP_PORT
listen=tcp:{{ salt['pillar.get']('kamailio:network:local_address_1') }}:SIP_PORT advertise {{ salt['pillar.get']('kamailio:network:address_1') }}:SIP_PORT
listen=tls:{{ salt['pillar.get']('kamailio:network:local_address_1') }}:SIPS_PORT advertise {{ salt['pillar.get']('kamailio:network:address_1') }}:SIPS_PORT

# -- here we disable with a comment insecure websockets without tls
#listen=tcp:{{ salt['pillar.get']('kamailio:network:local_address_1') }}:WS_PORT advertise {{ salt['pillar.get']('kamailio:network:address_1') }}:WS_PORT
listen=tls:{{ salt['pillar.get']('kamailio:network:local_address_1') }}:WSS_PORT advertise {{ salt['pillar.get']('kamailio:network:address_1') }}:WSS_PORT

# -- port to listen to
#    can be specified more than once if needed to listen on many ports
port=5060

#!ifdef WITH_TLS
enable_tls=yes
#!endif

#!ifdef WITH_WEBSOCKETS
# -- we dont support insecure websocket communication
#alias=WS_ADDR
#!ifdef WITH_TLS
alias=WSS_ADDR
#!endif
#!endif
#!ifdef WITH_MSRP
alias=MSRP_ADDR
#!endif

# -- life time of TCP connection when there is no traffic
#    a bit higher than registration expires to cope with UA behind NAT
tcp_connection_lifetime=3605


/*
    Custom Parameters
    -----------------
*/

# These parameters can be modified runtime via RPC interface
# - see the documentation of 'cfg_rpc' module.
#
# Format: group.id = value 'desc' description
# Access: $sel(cfg_get.group.id) or @cfg_get.group.id
#

#!ifdef WITH_PSTN
# PSTN GW Routing
#
# - pstn.gw_ip: valid IP or hostname as string value, example:
# pstn.gw_ip = "10.0.0.101" desc "My PSTN GW Address"
#
# - by default is empty to avoid misrouting
pstn.gw_ip = "" desc "PSTN GW Address"
#!endif

#!ifdef WITH_VOICEMAIL
# VoiceMail Routing on offline, busy or no answer
#
# - by default Voicemail server IP is empty to avoid misrouting
voicemail.srv_ip = "" desc "VoiceMail IP Address"
voicemail.srv_port = "5060" desc "VoiceMail Port"
#!endif

kamailio.bindip = "IP_ADDR" desc "Kamailio IP Address"
kamailio.bindport = "5060" desc "Kamailio Port"

#!ifdef WITH_ASTERISK
asterisk.bindip = "AST_ADDR" desc "Asterisk IP Address"
asterisk.bindport = "5080" desc "Asterisk Port"
#!endif

#!ifdef WITH_FREESWITCH
freeswitch.bindip = "FS_ADDR" desc "Freeswitch IP Address"
freeswitch.bindport = "5090" desc "Freeswitch Port"
#!endif


/*
    Modules Section
    ---------------
*/
# set paths to location of modules (to sources or installation folders)
#!ifdef WITH_SRCPATH
mpath="modules_k:modules"
#!else

mpath="/usr/local/lib/kamailio/modules_k/:/usr/lib/x86_64-linux-gnu/kamailio/modules/"

#!endif

#!ifdef WITH_ODBC
loadmodule "db_unixodbc.so"
#!endif

#!ifdef WITH_PSQL
loadmodule "db_postgres.so"
#!endif

loadmodule "mi_fifo.so"
loadmodule "kex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "textopsx.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "mi_rpc.so"
loadmodule "acc.so"
loadmodule "ipops.so"
loadmodule "sdpops.so"
loadmodule "corex.so"

#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_db.so"
#!ifdef WITH_IPAUTH
loadmodule "permissions.so"
#!endif
#!endif

#!ifdef WITH_ALIASDB
loadmodule "alias_db.so"
#!endif

#!ifdef WITH_SPEEDDIAL
loadmodule "speeddial.so"
#!endif

#!ifdef WITH_MULTIDOMAIN
loadmodule "domain.so"
#!endif

#!ifdef WITH_PRESENCE
loadmodule "presence.so"
loadmodule "presence_xml.so"
#!endif

#!ifdef WITH_NAT
loadmodule "nathelper.so"
loadmodule "rtpengine.so"
loadmodule "stun.so"

#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_ANTIFLOOD
loadmodule "htable.so"
loadmodule "pike.so"
#!endif

#!ifdef WITH_XMLRPC
loadmodule "xmlrpc.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

#!ifdef WITH_ASTERISK
loadmodule "uac.so"
#!endif

#!ifdef WITH_WEBSOCKETS
loadmodule "htable.so"
loadmodule "xhttp.so"
loadmodule "websocket.so"
#!endif


/*
    Setting module-specific parameters
    ----------------------------------
*/
# ----- mi_fifo params -----
modparam("mi_fifo", "fifo_name", "/var/run/kamailio/kamailio_fifo")

# ----- ctl params -----
modparam("ctl", "binrpc", "unix:/var/run/kamailio/kamailio_ctl")

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)

# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
#!ifdef WITH_ASTERISK
modparam("rr", "append_fromtag", 1)
#!else
modparam("rr", "append_fromtag", 0)
#!endif

# ----- registrar params -----
modparam("registrar", "method_filtering", 1)

# -- uncomment the next line to disable parallel forking via location
# modparam("registrar", "append_branches", 0)

# -- uncomment the next line not to allow more than 10 contacts per AOR
# modparam("registrar", "max_contacts", 10)

# max value for expires of registrations
modparam("registrar", "max_expires", 900)

# set it to 1 to enable GRUU
modparam("registrar", "gruu_enabled", 0)

# ----- acc params -----
# what special events should be accounted ?
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)

# by default ww do not adjust the direct of the sequential requests.
# if you enable this parameter, be sure the enable "append_fromtag"
# in "rr" module
modparam("acc", "detect_direction", 0)
# account triggers (flags)
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra", 
    "src_user=$fU;src_domain=$fd;src_ip=$si;"
    "dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
# enhanced DB accounting
#!ifdef WITH_ACCDB
modparam("acc", "db_flag", FLT_ACC)
modparam("acc", "db_missed_flag", FLT_ACCMISSED)
modparam("acc", "db_url", DBURL)
modparam("acc", "db_extra",
    "src_user=$fU;src_domain=$fd;src_ip=$si;"
    "dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
#!endif

# ----- usrloc params -----
# enable DB persistency for location entries
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)
modparam("usrloc", "use_domain", MULTIDOMAIN)
#!endif

# ----- auth_db params -----
#!ifdef WITH_AUTH
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "load_credentials", "")
#!ifdef WITH_ASTERISK
modparam("auth_db", "user_column", "name")
modparam("auth_db", "password_column", "sippasswd")
modparam("auth_db", "db_url", DBASTURL)
modparam("auth_db", "version_table", 0)
#!else
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "use_domain", MULTIDOMAIN)
#!endif

#!ifdef WITH_IPAUTH
# ----- permissions params -----
modparam("permissions", "db_url", DBURL)
modparam("permissions", "db_mode", 1)
#!endif

#!endif

#!ifdef WITH_ALIASDB
# ----- alias_db params -----
modparam("alias_db", "db_url", DBURL)
modparam("alias_db", "use_domain", MULTIDOMAIN)
#!endif

#!ifdef WITH_SPEEDDIAL
# ----- speedial params -----
modparam("speeddial", "db_url", DBURL)
modparam("speeddial", "use_domain", MULTIDOMAIN)
#!endif

#!ifdef WITH_MULTIDOMAIN
# ----- domain params -----
modparam("domain", "db_url", DBURL)
# register callback to match myself condition with domains list
modparam("domain", "register_myself", 1)
#!endif

#!ifdef WITH_PRESENCE
# ----- presence params -----
modparam("presence", "db_url", DBURL)

# ----- presence_xml params -----
modparam("presence_xml", "db_url", DBURL)
modparam("presence_xml", "force_active", 1)
#!endif

#!ifdef WITH_NAT
# ----- rtppengine params -----
modparam("rtpengine", "rtpengine_sock", "udp:localhost:22222")
modparam("nathelper", "received_avp", "$avp(s:rcv)")

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 15)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:betty@sip.iofun.io")
# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)") # <------------ ?
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif

#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "/etc/kamailio/tls.cfg")
#!endif

#!ifdef WITH_MSRP
# ----- htable params -----
modparam("htable", "htable", "msrp=>size=8;autoexpire=MSRP_MAX_EXPIRES;")
#!endif

#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)

# ----- htable params -----
# ip ban htable with autoexpire after 5 minutes
modparam("htable", "htable", "ipban=>size=8;autoexpire=300;")
#!endif

#!ifdef WITH_XMLRPC
# ----- xmlrpc params -----
modparam("xmlrpc", "route", "XMLRPC");
modparam("xmlrpc", "url_match", "^/RPC")
#!endif

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
#!endif


/*
    Routing Logic
    -------------
*/

# Main SIP request routing logic
# - processing of any incoming SIP request starts with this route
# - note: this is the same as route { ... }
request_route {

    # per request initial checks
    route(REQINIT);

    # per request initial checks
    route(SANITY_CHECK);
    
    # websocket detection
    route(WSDETECT);

    # NAT detection
    route(NATDETECT);

    if (!(proto == WS || proto == WSS)) {
        route(AUTH);
    }

    # handle requests within SIP dialogs
    route(WITHINDLG);

    ### only initial requests (no To tag)
 
    # CANCEL processing
    if (is_method("CANCEL"))
    {
        if (t_check_trans())
            t_relay();
        exit;
    }

    t_check_trans();

    # authentication
    route(AUTH);

    # record routing for dialog forming requests (in case they are routed)
    # - remove preloaded route headers
    remove_hf("Route");
    if (is_method("INVITE|SUBSCRIBE")){
        record_route();
    }

    # account only INVITEs
    if (is_method("INVITE")){
        setflag(FLT_ACC); # do accounting
    }

    # dispatch requests to foreign domains
    route(SIPOUT);

    # handle presence related requests
    route(PRESENCE);

    # handle registrations
    route(REGISTRAR);

    # this stuff is needed after registration
    if ($rU==$null){
        # request with no Username in RURI
        sl_send_reply("484","Address Incomplete");
        exit;
    }

    # dispatch destinations to PSTN
    route(PSTN);
 
    # user location service
    route(LOCATION);

    # proxy relay
    route(RELAY);
}


route[RELAY] {

    # enable additional event routes for forwarded requests
    # - serial forking, RTP relaying handling, a.s.o.
    if (is_method("INVITE|SUBSCRIBE")) {
        t_on_branch("MANAGE_BRANCH");
        t_on_reply("MANAGE_REPLY");
    }
    if (is_method("INVITE")) {
        t_on_failure("MANAGE_FAILURE");
    }

    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}


# Per SIP request initial checks
route[REQINIT] {
#!ifdef WITH_ANTIFLOOD
    # flood dection from same IP and traffic ban for a while
    # be sure you exclude checking trusted peers, such as pstn gateways
    # - local host excluded (e.g., loop to self)
    if(src_ip!=myself)
    {
        if($sht(ipban=>$si)!=$null)
        {
            # ip is already blocked
            xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
            exit;
        }
        if (!pike_check_req())
        {
            xlogl("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
            $sht(ipban=>$si) = 1;
            exit;
        }
    }
#!endif

    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }

    if(!sanity_check("1511", "7"))
    {
        xlogl("Malformed SIP message from $si:$sp\n");
        exit;
    }
}


# Per SIP request sanity checks
route[SANITY_CHECK] {

    if (!mf_process_maxfwd_header("10")) {
        xlog("L_WARN", "$ci|end|too much hops, not enough barley");
        send_reply("483", "Too Many Hops");
        exit;
    }

    if (!sanity_check()) {
        xlog("L_WARN", "$ci|end|message is insane");
        exit;
    }

    if ($ua == "friendly-scanner" ||
        $ua == "sundayddr" ||
        $ua =~ "sipcli" ) {
        xlog("L_WARN", "$ci|end|dropping message with user-agent $ua");
        exit;
    }

}


# Handle requests within SIP dialogs
route[WITHINDLG] {
    if (has_totag()) {
        # sequential request withing a dialog should
        # take the path determined by record-routing
        if (loose_route()) {

#!ifdef WITH_WEBSOCKETS
            if (!isdsturiset()) {
                handle_ruri_alias(); 
            }
        
            if ($du == "") {
                    if (!handle_ruri_alias()) {
                    xlogl("L_ERR", "Bad alias <$ru>\n");
                    sl_send_reply("400", "Bad Request");
                    exit;
                }
            }
#!endif
            if (is_method("BYE")) {
                setflag(FLT_ACC); # do accounting ...
                setflag(FLT_ACCFAILED); # ... even if the transaction fails
            }
            if (is_method("ACK")) {
                # ACK is forwarded statelessy
                route(NATMANAGE);
            }
            route(RELAY);
        } else {
            if (is_method("SUBSCRIBE") && uri == myself) {
                # in-dialog subscribe requests
                route(PRESENCE);
                exit;
            }
            if (is_method("ACK")) {
                if ( t_check_trans() ) {
                    # no loose-route, but stateful ACK;
                    # must be an ACK after a 487
                    # or e.g. 404 from upstream server
                    t_relay();
                    exit;
                } else {
                    # ACK without matching transaction ... ignore and discard
                    exit;
                }
            }
            sl_send_reply("404","Not here");
        }
        exit;
    }
}


# Handle SIP registrations
route[REGISTRAR] {
    if (is_method("REGISTER")) {
        if(isflagset(FLT_NATS)) {
            setbflag(FLB_NATB);
            # uncomment next line to do SIP NAT pinging 
            setbflag(FLB_NATSIPPING);
        }
        if (!save("location")) {
            sl_reply_error();
        }
#!ifdef WITH_ASTERISK
        xlogl("L_INFO", "Forward REGISTER to Asterisk");
        route(REGFWD);
#!endif
        exit;
    }
}


# USER location service
route[LOCATION] {

#!ifdef WITH_SPEEDIAL
    # search for short dialing - 2-digit extension
    if ($rU=~"^[0-9][0-9]$") {
        if(sd_lookup("speed_dial")) {
            route(SIPOUT);
        }
    }
#!endif

#!ifdef WITH_ALIASDB
    # search in DB-based aliases
    if(alias_db_lookup("dbaliases"))
        route(SIPOUT);
#!endif

#!ifdef WITH_ASTERISK

    if(is_method("INVITE") && (!route(FROMASTERISK))) {
        # if new call from out there - send to Asterisk
        # - non-INVITE request are routed directly by Kamailio
        # - traffic from Asterisk is routed also directy by Kamailio

        route(TOASTERISK);
        exit;
    }
#!endif
 
    $avp(oexten) = $rU;
    if (!lookup("location")) {
        $var(rc) = $rc;
        route(TOVOICEMAIL);
        t_newtran();
        switch ($var(rc)) {
            case -1:
            case -3:
                send_reply("404", "Not Found");
                exit;
            case -2:
                send_reply("405", "Method Not Allowed");
                exit;
        }
    }

    # when routing via usrloc, log the missed calls also
    if (is_method("INVITE")) {
        setflag(FLT_ACCMISSED);
    }

    t_on_failure("UA_FAILURE");
}


# Presence server route
route[PRESENCE] {
    if(!is_method("PUBLISH|SUBSCRIBE")){
        return;
    }

#!ifdef WITH_PRESENCE
    if (!t_newtran()){
        sl_reply_error();
        exit;
    };

    if(is_method("PUBLISH")){
        handle_publish();
        t_release();
    }
    else
    if(is_method("SUBSCRIBE")){
        handle_subscribe();
        t_release();
    }
    exit;
#!endif

    # if presence enabled, this part will not be executed
    if (is_method("PUBLISH") || $rU==$null){
        sl_send_reply("404", "Not here");
        exit;
    }
    return;
}


# Authentication route
route[AUTH] {

#!ifdef WITH_AUTH
    
#!ifdef WITH_ASTERISK
    # do not auth traffic from Asterisk - trusted!
    if(route(FROMASTERISK)){
        return;
    }
#!endif

#!ifdef WITH_IPAUTH
    if((!is_method("REGISTER")) && allow_source_address()) {
        # source IP allowed
        return;
    }
#!endif

    if (is_method("REGISTER") || from_uri==myself) {
        # authenticate requests
#!ifdef WITH_ASTERISK
        if (!auth_check("$fd", "sip", "1")) {
#!else
        if (!auth_check("$fd", "subscriber", "1")) {
#!endif
            auth_challenge("$fd", "0");
            exit;
        }
        # user authenticated - remove auth header
        if(!is_method("REGISTER|PUBLISH")){
            consume_credentials();
        }
    }
    # if caller is not local subscriber, then check if it calls
    # a local destination, otherwise deny, not an open relay here
    if (from_uri!=myself && uri!=myself) {
        sl_send_reply("403","Not relaying");
        exit;
    }

#!endif
    return;
}


# rtpengine control

route[NATMANAGE] {
#!ifdef WITH_NAT
    if (is_request()) {
        if(has_totag()) {
            if(check_route_param("nat=yes")) {
                setbflag(FLB_NATB);
            }
        }
    }
    
    if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB))){
        return;
    }

    if ($ru =~ "transport=ws") {
        xlogl("L_INFO", "Request going to WebSocket");
        rtpengine_manage("trust-address replace-origin replace-session-connection ICE=remove DTLS=passive RTP/AVP");
    }
    else if ($proto =~ "ws") {
        xlogl("L_INFO", "Request coming from WebSocket");
        rtpengine_manage("trust-address replace-origin replace-session-connection ICE=force DTLS=passive RTP/SAVPF");
    }

    else {
        xlogl("L_INFO", "This is a standard SIP request");
        rtpengine_manage("replace-origin replace-session-connection");
    }

    if (is_request()) {
        if (!has_totag()) {
            add_rr_param(";nat=yes");
        }
    }

    if (is_reply()) {
        if(isbflagset(FLB_NATB)) {
            add_contact_alias();
        }
    }
#!endif
    return;
}


# Routing to foreign domains
route[SIPOUT] {
    if (!uri==myself){
        append_hf("P-hint: outbound\r\n");
        route(RELAY);
    }
}

# PSTN GW routing
route[PSTN] {
#!ifdef WITH_PSTN
    # check if PSTN GW IP is defined
    if (strempty($sel(cfg_get.pstn.gw_ip))) {
        xlogl("SCRIPT: PSTN rotuing enabled but pstn.gw_ip not defined\n");
        return;
    }

    # route to PSTN dialed numbers starting with '+' or '00'
    #     (international format)
    # - update the condition to match your dialing rules for PSTN routing
    if(!($rU=~"^(\+|00)[1-9][0-9]{3,20}$")){
        return;
    }

    # only local users allowed to call
    if(from_uri!=myself) {
        sl_send_reply("403", "Not Allowed");
        exit;
    }

    $ru = "sip:" + $rU + "@" + $sel(cfg_get.pstn.gw_ip);

    route(RELAY);
    exit;
#!endif

    return;
}


# XMLRPC routing
#!ifdef WITH_XMLRPC
route[XMLRPC] {
    # allow XMLRPC from localhost
    if ((method=="POST" || method=="GET")
            && (src_ip==127.0.0.1)) {
        # close connection only for xmlrpclib user agents (there is a bug in
        # xmlrpclib: it waits for EOF before interpreting the response).
        if ($hdr(User-Agent) =~ "xmlrpclib"){
            set_reply_close();
        }
        set_reply_no_connect();
        dispatch_rpc();
        exit;
    }
    send_reply("403", "Forbidden");
    exit;
}
#!endif


#!ifdef WITH_ASTERISK

# Incoming From Asterisk
route[FROMASTERISK] {
    if($si==$sel(cfg_get.asterisk.bindip)
            && $sp==$sel(cfg_get.asterisk.bindport)){
        return 1;
    }
    return -1;
}


# Send to Asterisk
route[TOASTERISK] {
    $du = "sip:" + $sel(cfg_get.asterisk.bindip) + ":"
            + $sel(cfg_get.asterisk.bindport);
    route(RELAY);
    exit;
}


# Forward REGISTER to Asterisk
route[REGFWD] {
    if(!is_method("REGISTER")){
        return;
    }
    $var(rip) = $sel(cfg_get.asterisk.bindip);
    $uac_req(method)="REGISTER";
    $uac_req(ruri)="sip:" + $var(rip) + ":" + $sel(cfg_get.asterisk.bindport);
    $uac_req(furi)="sip:" + $au + "@" + $var(rip);
    $uac_req(turi)="sip:" + $au + "@" + $var(rip);
    $uac_req(hdrs)="Contact: <sip:" + $au + "@"
                + $sel(cfg_get.kamailio.bindip)
                + ":" + $sel(cfg_get.kamailio.bindport) + ">\r\n";
    if($sel(contact.expires) != $null)
        $uac_req(hdrs)= $uac_req(hdrs) + "Expires: " + $sel(contact.expires) + "\r\n";
    else
        $uac_req(hdrs)= $uac_req(hdrs) + "Expires: " + $hdr(Expires) + "\r\n";
    uac_req_send();
}
#!endif


# route to voicemail server
route[TOVOICEMAIL] {
#!ifdef WITH_VOICEMAIL
    if(!is_method("INVITE"))
        return;

    # check if VoiceMail server IP is defined
    if (strempty($sel(cfg_get.voicemail.srv_ip))) {
        xlogl("SCRIPT: VoiceMail routing enabled but IP not defined\n");
        return;
    }
    if($avp(oexten)==$null)
        return;

    $ru = "sip:" + $avp(oexten) + "@" + $sel(cfg_get.voicemail.srv_ip)
                + ":" + $sel(cfg_get.voicemail.srv_port);
    route(RELAY);
    exit;
#!endif
    return;
}


# manage websockets detection
route[WSDETECT] {
    if (proto == WS || proto == WSS) {
        
        force_rport();
        
        if (is_method("REGISTER|SUBSCRIBE")) {
            fix_nated_register();
        } else if (is_method("INVITE|NOTIFY|SUBSCRIBE")) {
            add_contact_alias(); 
        }
    
    }
}


# Caller NAT detection route
route[NATDETECT] {
#!ifdef WITH_NAT
    force_rport();
    if (nat_uac_test("19")) {
        if (is_method("REGISTER|SUBSCRIBE")) {
            fix_nated_register();
        } else {
            add_contact_alias();
        }
        setflag(FLT_NATS);
    }
#!endif
    return;
}


# manage outgoing branches
branch_route[MANAGE_BRANCH] {
    xdbg("new branch [$T_branch_idx] to $ru\n");
    route(NATMANAGE);
}


# manage incoming replies
onreply_route[MANAGE_REPLY] {
    xdbg("incoming reply\n");
    if(status=~"[12][0-9][0-9]")
        route(NATMANAGE);
}


# manage rtpengine incoming replies
onreply_route[rtpengine_REPLY] {
    if (status =~ "18[03]") {
        change_reply_status(180, "Ringing");
        remove_body();
    } else if (status =~ "2[0­9][0­9]" && sdp_content()) {
        rtpengine_answer($avp(rtpengine_answer_flags));
    }
}


#!ifdef WITH_WEBSOCKETS
onreply_route {
    if ((proto == WS || proto == WSS)
            && status =~ "[12][0-9][0-9]") {
        add_contact_alias();
    }
}


# manage failure routing cases
failure_route[MANAGE_FAILURE] {
    route(NATMANAGE);

    if (t_is_canceled()) {
        exit;
    }

#!ifdef WITH_BLOCK3XX
    # block call redirect based on 3xx replies.
    if (t_check_status("3[0-9][0-9]")) {
        t_reply("404","Not found");
        exit;
    }
#!endif

#!ifdef WITH_VOICEMAIL
    # serial forking
    # - route to voicemail on busy or no answer (timeout)
    if (t_check_status("486|408")) {
        route(TOVOICEMAIL);
        exit;
    }
#!endif
}


# manage ua failure routing cases
failure_route[UA_FAILURE] {
    if (t_check_status("488") && sdp_content()) {
        if (sdp_get_line_startswith("$avp(mline)", "m=")) { 
            if ($avp(mline) =~ "SAVPF") {
                $avp(rtpengine_offer_flags) = "force trust-address replace-origin replace-session-connection ICE=remove RTP/AVP";

                $avp(rtpengine_answer_flags) = "force trust-address replace-origin replace-session-connection ICE=force RTP/SAVPF"; 
            } else {
                $avp(rtpengine_offer_flags) = "force trust-address replace-origin replace-session-connection ICE=force RTP/SAVPF";
                $avp(rtpengine_answer_flags) = "force trust-address replace-origin replace-session-connection ICE=remove RTP/AVP";
            }
            # In a production system you probably need to catch
            # "RTP/SAVP" and "RTP/AVPF" and handle them correctly
            # too 
        }
        append_branch();
        rtpengine_offer($avp(rtpengine_offer_flags));        
        t_on_reply("rtpengine_REPLY");
        route(RELAY);
    }
}


# manage http routing cases
event_route[xhttp:request] {
    set_reply_close();
    set_reply_no_connect();
    
    if ($Rp != WS_PORT
#!ifdef WITH_TLS
        && $Rp != WSS_PORT
#!endif
    ) {
        xlogl("L_WARN", "HTTP request received on $Rp\n");
        xhttp_reply("403", "Forbidden", "", "");
        exit;
    }

    xlogl("L_DBG", "HTTP Request Received\n");

    if ($hdr(Upgrade)=~"websocket"
        && $hdr(Connection)=~"Upgrade"
        && $rm=~"GET") {
        
        # Validate as required (Host:, Origin:, Cookie:)

        # Validate Host - make sure the client is using the correct alias for WebSockets
        if ($hdr(Host) == $null || !is_myself("sip:" + $hdr(Host))) {
            xlogl("L_WARN", "Bad host $hdr(Host)\n");
            xhttp_reply("403", "Forbidden", "", "");
            exit;
        }

        # Optional... validate Origin - make sure the client is from an
        # authorised website.  For example,
        #
        # if ($hdr(Origin) != "http://communicator.DOMAIN"
        #     && $hdr(Origin) != "https://communicator.DOMAIN") {
        #   xlogl("L_WARN", "Unauthorised client $hdr(Origin)\n");
        #   xhttp_reply("403", "Forbidden", "", "");
        #   exit;
        # }

        # Optional... perform HTTP authentication

        # ws_handle_handshake() exits (no further configuration file
        # processing of the request) when complete.
        
        if (ws_handle_handshake()) {
            # Optional... cache some information about the
            # successful connection
            exit;
        }
    }
    
    xhttp_reply("404", "Not Found", "", "");
}


event_route[websocket:closed] {
    xlogl("L_INFO", "WebSocket connection from $si:$sp has closed\n");
}
#!endif