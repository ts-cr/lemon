[general]
;
; Global settings for call queues
;
; Persistent Members
;    Store each dynamic member in each queue in the astdb so that
;    when asterisk is restarted, each member will be automatically
;    read into their recorded queues. Default is 'yes'.
;
persistentmembers = yes
;
; AutoFill Behavior
;    The old behavior of the queue (autofill=no) is to have a serial type behavior
;    in that the queue will make all waiting callers wait in the queue
;    even if there is more than one available member ready to take
;    calls until the head caller is connected with the member they
;    were trying to get to. The next waiting caller in line then
;    becomes the head caller, and they are then connected with the
;    next available member and all available members and waiting callers
;    waits while this happens. The new behavior, enabled by setting
;    autofill=yes makes sure that when the waiting callers are connecting
;    with available members in a parallel fashion until there are
;    no more available members or no more waiting callers. This is
;    probably more along the lines of how a queue should work and
;    in most cases, you will want to enable this behavior. If you
;    do not specify or comment out this option, it will default to yes.
;
;autofill = no
;
; Monitor Type
;    By setting monitor-type = MixMonitor, when specifying monitor-format
;    to enable recording of queue member conversations, app_queue will
;    now use the new MixMonitor application instead of Monitor so
;    the concept of "joining/mixing" the in/out files now goes away
;    when this is enabled. You can set the default type for all queues
;    here, and then also change monitor-type for individual queues within
;    queue by using the same configuration parameter within a queue
;    configuration block. If you do not specify or comment out this option,
;    it will default to the old 'Monitor' behavior to keep backward
;    compatibility.
;
monitor-type = MixMonitor
;
; UpdateCDR behavior.
;    This option is implemented to mimic chan_agents behavior of populating
;    CDR dstchannel field of a call with an agent name, which you can set
;    at the login time with AddQueueMember membername parameter.
;
; updatecdr = no

;
; Note that a timeout to fail out of a queue may be passed as part of
; an application call from extensions.conf:
; Queue(queuename,[options],[optionalurl],[announceoverride],[timeout])
; example: Queue(dave,t,,,45)

; shared_lastcall will make the lastcall and calls received be the same in
; members logged in more than one queue.  This is useful to make the queue
; respect the wrapuptime of another queue for a shared member.
; The default value is no.
;
;shared_lastcall=no
;
; Negative_penalty_invalid will treat members with a negative penalty as logged off
;
;negative_penalty_invalid = no
;
; log_membername_as_agent will cause app_queue to log the membername rather than
; the interface for the ADDMEMBER and REMOVEMEMBER events when a state_interface
; is set.  The default value (no) maintains backward compatibility.
;
;log_membername_as_agent = no
;
[godzilla]
;
; A sample call queue
;
; Musicclass sets which music applies for this particular call queue.
; The only class which can override this one is if the MOH class is set
; directly on the channel using Set(CHANNEL(musicclass)=whatever) in the
; dialplan.
;
musicclass = default
;
; An announcement may be specified which is played for the member as
; soon as they answer a call, typically to indicate to them which queue
; this call should be answered as, so that agents or members who are
; listening to more than one queue can differentiated how they should
; engage the customer
;
;announce = queue-markq
;
; A strategy may be specified.  Valid strategies include:
;
; ringall - ring all available channels until one answers (default)
; leastrecent - ring interface which was least recently hung up by this queue
; fewestcalls - ring the one with fewest completed calls from this queue
; random - ring random interface
; rrmemory - round robin with memory, remember where we left off last ring pass
; rrordered - same as rrmemory, except the queue member order from config file 
;             is preserved
; linear - rings interfaces in the order specified in this configuration file.
;          If you use dynamic members, the members will be rung in the order in
;          which they were added
; wrandom - rings random interface, but uses the member's penalty as a weight
;           when calculating their metric. So a member with penalty 0 will have
;           a metric somewhere between 0 and 1000, and a member with penalty 1 will
;			have a metric between 0 and 2000, and a member with penalty 2 will have
;           a metric between 0 and 3000. Please note, if using this strategy, the member
;           penalty is not the same as when using other queue strategies. It is ONLY used
;           as a weight for calculating metric.
;
strategy = ringall
;
; Second settings for service level (default 0)
; Used for service level statistics (calls answered within service level time
; frame)
;servicelevel = 60
;
; A context may be specified, in which if the user types a SINGLE
; digit extension while they are in the queue, they will be taken out
; of the queue and sent to that extension in this context.
;
;context = qoutcon
;
; A limit can be set to disregard penalty settings when the queue has
; too few members.  No penalty will be weighed in if there are only X
; or fewer queue members. (default 0)
;
;penaltymemberslimit = 5
;
;----------------------QUEUE TIMING OPTIONS------------------------------------
; A Queue has two different "timeout" values associated with it. One is the
; timeout parameter configured in queues.conf. This timeout specifies the
; amount of time to try ringing a member's phone before considering the
; member to be unavailable. The other timeout value is the second argument
; to the Queue() application. This timeout represents the absolute amount
; of time to allow a caller to stay in the queue before the caller is
; removed from the queue. In certain situations, these two timeout values
; may clash. For instance, if the timeout in queues.conf is set to 5 seconds,
; the retry value in queues.conf is set to 4, and the second argument to Queue()
; is 10, then the following may occur:
;
; A caller places a call to a queue.
; The queue selects a member and attempts to ring that member.
; The member's phone is rung for 5 seconds and he does not answer.
; The retry time of 4 seconds occurs.
; The queue selects a second member to call.
;
; How long does that second member's phone ring? Does it ring for 5 seconds
; since the timeout set in app_queue is 5 seconds? Does it ring for 1 second since
; the caller has been in the queue for 9 seconds and is supposed to be removed after
; being in the queue for 10 seconds? This is configurable with the timeoutpriority
; option. By setting the timeoutpriority to "conf" then you are saying that you would
; rather use the time specified in the configuration file even if it means having the
; caller stay in the queue longer than the time specified in the application argument.
; For the scenario described above, timeoutpriority=conf would result in the second
; member's phone ringing for 5 seconds. By specifying "app" as the value for
; timeoutpriority, you are saying that the timeout specified as the argument to the
; Queue application is more important. In the scenario above, timeoutpriority=app
; would result in the second member's phone ringing for 1 second.
;
; There are a few exceptions to the priority rules. For instance, if timeoutpriority=appp
; and the configuration file timeout is set to 0, but the application argument timeout is
; non-zero, then the timeoutpriority is ignored and the application argument is used as
; the timeout. Furthermore, if no application argument timeout is specified, then the
; timeoutpriority option is ignored and the configuration file timeout is always used
; when calling queue members.
;
; In timeoutpriority=conf mode however timeout specified in config file will take higher
; priority than timeout in application arguments, so if config file has timeout 0, each
; queue member will be called indefineately and application timeout will be checked only
; after this call attempt. This is useful for having queue members with custom timeouts
; specified within Dial application of Local channel, and allows handling NO ANSWER which
; would otherwise be interrupted by queue destroying child channel on timeout.
;
; The default value for timeoutpriority is "app" since this was how previous versions of
; Asterisk behaved.
;
;timeout = 15
;retry = 5
;timeoutpriority = app|conf
;
;-----------------------END QUEUE TIMING OPTIONS---------------------------------
; Weight of queue - when compared to other queues, higher weights get
; first shot at available channels when the same channel is included in
; more than one queue.
;
;weight=0
;
; After a successful call, how long to wait before sending a potentially
; free member another call (default is 0, or no delay)
;
wrapuptime=15
;
; Autofill will follow queue strategy but push multiple calls through
; at same time until there are no more waiting callers or no more
; available members. The per-queue setting of autofill allows you
; to override the default setting on an individual queue level.
;
;autofill=yes
;
; Autopause will pause a queue member if they fail to answer a call
; no: Member will not be paused
; yes: Member will be paused only in the queue where the timeout took place
; all: Memeber will be paused in all queues he/she is a member
;autopause=yes
;
; Autopausedelay delay autopause for autopausedelay seconds from the
; last call if a member has not taken a call the delay has no effect.
;autopausedelay=60
;
; Autopausebusy controls whether or not a queue member is set as paused
; automatically upon the member device reporting busy. The autopausedelay
; option applies. Defaults to 'no'.
;autopausebusy=no
;
; Autopauseunavail controls whether or not a queue member is set as paused
; automatically upon the member device reporting congestion. The autopausedely
; option applies. Defaults to 'no'.
;autopauseunavail=no
;
; Maximum number of people waiting in the queue (0 for unlimited)
;
;maxlen = 0
;
; If set to yes, just prior to the caller being bridged with a queue member
; the following variables will be set
; MEMBERINTERFACE is the interface name (eg. Agent/1234)
; MEMBERNAME is the member name (eg. Joe Soap)
; MEMBERCALLS is the number of calls that interface has taken,
; MEMBERLASTCALL is the last time the member took a call.
; MEMBERPENALTY is the penalty of the member
; MEMBERDYNAMIC indicates if a member is dynamic or not
; MEMBERREALTIME indicates if a member is realtime or not
;
;setinterfacevar=no
;
; If set to yes, just prior to the caller being bridged with a queue member
; the following variables will be set:
; QEHOLDTIME callers hold time
; QEORIGINALPOS original position of the caller in the queue
;
;setqueueentryvar=no
;
; If set to yes, the following variables will be set
; just prior to the caller being bridged with a queue member
; and just prior to the caller leaving the queue
; QUEUENAME name of the queue
; QUEUEMAX maxmimum number of calls allowed
; QUEUESTRATEGY the strategy of the queue;
; QUEUECALLS number of calls currently in the queue
; QUEUEHOLDTIME current average hold time
; QUEUECOMPLETED number of completed calls for the queue
; QUEUEABANDONED number of abandoned calls
; QUEUESRVLEVEL queue service level
; QUEUESRVLEVELPERF current service level performance
;
;setqueuevar=no

; if set, run this macro when connected to the queue member
; you can override this macro by setting the macro option on
; the queue application
;
;membermacro=macro_name[,arg1[,...][,argN]]

; if set, run this gosub when connected to the queue member
; you can override this gosub by setting the gosub option on
; the queue application
;
;membergosub=gosub_context_name[,arg1[,...][,argN]]

; How often to announce queue position and/or estimated
; holdtime to caller (0=off)
; Note that this value is ignored if the caller's queue
; position has changed (see min-announce-frequency)
;
;announce-frequency = 90
;
; The absolute minimum time between the start of each
; queue position and/or estimated holdtime announcement
; This is useful for avoiding constant announcements
; when the caller's queue position is changing frequently
; (see announce-frequency)
;
;min-announce-frequency = 15
;
; How often to make any periodic announcement (see periodic-announce)
;
;periodic-announce-frequency=60
;
; Should the periodic announcements be played in a random order? Default is no.
;
;random-periodic-announce=no
;
; If set to yes, the periodic announcment frequency will be timed from the end
; of each announcment rather than from the start of each announcment.  This
; defaults to off.
;
;relative-periodic-announce=yes
;
; Should we include estimated hold time in position announcements?
; Either yes, no, or only once.
; Hold time will be announced as the estimated time.
;
;announce-holdtime = yes|no|once
;
; Queue position announce?
; Valid values are "yes," "no," "limit," or "more." If set to "no," then the caller's position will
; never be announced. If "yes," then the caller's position in the queue will be announced
; to the caller. If set to "more," then if the number of callers is more than the number
; specified by the announce-position-limit option, then the caller will hear that there
; are more than that many callers waiting (i.e. if a caller number 6 is in a queue with the
; announce-position-limit set to 5, then that caller will hear that there are more than 5
; callers waiting). If set to "limit," then only callers within the limit specified by announce-position-limit
; will have their position announced.
;
;announce-position = yes
;
; If you have specified "limit" or "more" for the announce-position option, then the following
; value is what is used to determine what announcement to play to waiting callers. If you have
; set the announce-position option to anything else, then this will have no bearing on queue operation
;
;announce-position-limit = 5
;
; What's the rounding time for the seconds?
; If this is non-zero, then we announce the seconds as well as the minutes
; rounded to this value.
; Valid values are 0, 5, 10, 15, 20, and 30.
;
; announce-round-seconds = 10
;
; Use these sound files in making position/holdtime announcements.  The
; defaults are as listed below -- change only if you need to.
;
; Keep in mind that you may also prevent a sound from being played if you
; explicitly set a sound to be an empty string. For example, if you want to
; prevent the queue from playing queue-thankyou, you may set the sound using
; the following line:
;
; queue-thankyou=
;
			;	("You are now first in line.")
;queue-youarenext = queue-youarenext
			;	("There are")
;queue-thereare	= queue-thereare
			;	("calls waiting.")
;queue-callswaiting = queue-callswaiting
			;	("The current est. holdtime is")
;queue-holdtime = queue-holdtime
			;	("minute.")
;queue-minute = queue-minute
			;	("minutes.")
;queue-minutes = queue-minutes
			;	("seconds.")
;queue-seconds = queue-seconds
			;	("Thank you for your patience.")
;queue-thankyou = queue-thankyou
			;       ("Hold time")
;queue-reporthold = queue-reporthold
			;       ("All reps busy / wait for next")
;periodic-announce = queue-periodic-announce
;
; A set of periodic announcements can be defined by separating
; periodic announcements to reproduce by commas. For example:
;periodic-announce = queue-periodic-announce,your-call-is-important,please-wait
;
; The announcements will be played in the order in which they are defined. After
; playing the last announcement, the announcements begin again from the beginning.
;
; Calls may be recorded using Asterisk's monitor/MixMonitor resource
; This can be enabled from within the Queue application, starting recording
; when the call is actually picked up; thus, only successful calls are
; recorded, and you are not recording while people are listening to MOH.
; To enable monitoring, simply specify "monitor-format";  it will be disabled
; otherwise.
;
; You can specify the monitor filename with by calling
;    Set(MONITOR_FILENAME=foo)
; Otherwise it will use MONITOR_FILENAME=${UNIQUEID}
;
; Pick any one valid extension for monitor format recording. If you leave
; monitor-format commented out, it will not record calls.
;
; monitor-format = gsm|wav|wav49
;
; Monitor Type
;    By setting monitor-type = MixMonitor, when specifying monitor-format
;    to enable recording of queue member conversations, app_queue will
;    now use the new MixMonitor application instead of Monitor so
;    the concept of "joining/mixing" the in/out files now goes away
;    when this is enabled. If you do not specify or comment out this option,
;    it will default to the old 'Monitor' behavior to keep backward
;    compatibility.
;
; monitor-type = MixMonitor
;
; ----------------------- TYPE MIXMONITOR OPTIONS -----------------------------
;
;
; You can specify the options supplied to MixMonitor by calling (from the dialplan)
;   Set(MONITOR_OPTIONS=av(<x>)V(<x>)W(<x>))
; The 'b' option for MixMonitor (only save audio to the file while bridged) is
; implied.
;
; You can specify a post recording command to be executed after the end of
; recording by calling (from the dialplan)
;
;   Set(MONITOR_EXEC=mv /var/spool/asterisk/monitor/^{MONITOR_FILENAME} /tmp/^{MONITOR_FILENAME})
;
; or
;
;   Set(MONITOR_EXEC=mv /var/spool/asterisk/monitor/^{MIXMONITOR_FILENAME} /tmp/^{MIXMONITOR_FILENAME})
;
; If you choose to use the latter, you will not be able to switch the monitor-type back to Monitor
; without changing this in the dialplan.
;
;
; The command specified within the contents of MONITOR_EXEC will be executed when
; the recording is over. Any strings matching ^{X} will be unescaped to ${X} and
; all variables will be evaluated just prior to recording being started.
;
; The contents of MONITOR_FILENAME will also be unescaped from ^{X} to ${X} and
; all variables will be evaluated just prior to recording being started.
;
; ---------------------- Queue Empty Options ----------------------------------
;
; Asterisk has provided the "joinempty" and "leavewhenempty" options for a while
; with tenuous definitions of what they actually mean. The "joinempty" option controls
; whether a caller may join a queue depending on several factors of member availability.
; Similarly, then leavewhenempty option controls whether a caller may remain in a queue
; he has already joined. Both options take a comma-separated list of factors which
; contribute towards whether a caller may join/remain in the queue. The list of
; factors which contribute to these option is as follows:
;
; paused: a member is not considered available if he is paused
; penalty: a member is not considered available if his penalty is less than QUEUE_MAX_PENALTY
; inuse: a member is not considered available if he is currently on a call
; ringing: a member is not considered available if his phone is currently ringing
; unavailable: This applies mainly to Agent channels. If the agent is a member of the queue
;              but has not logged in, then do not consider the member to be available
; invalid: Do not consider a member to be available if he has an "invalid" device state.
;          This generally is caused by an error condition in the member's channel driver.
; unknown: Do not consider a member to be available if we are unable to determine the member's
;          current device state.
; wrapup: A member is not considered available if he is currently in his wrapuptime after
;         taking a call.
;
; For the "joinempty" option, when a caller attempts to enter a queue, the members of that
; queue are examined. If all members are deemed to be unavailable due to any of the conditions
; listed for the "joinempty" option, then the caller will be unable to enter the queue. For the
; "leavewhenempty" option, the state of the members of the queue are checked periodically during
; the caller's stay in the queue. If all of the members are unavailable due to any of the above
; conditions, then the caller will be removed from the queue.
;
; Some examples:
;
;joinempty = paused,inuse,invalid
;
; A caller will not be able to enter a queue if at least one member cannot be found
; who is not paused, on the phone, or who has an invalid device state.
;
;leavewhenempty = inuse,ringing
;
; A caller will be removed from the queue if at least one member cannot be found
; who is not on the phone, or whose phone is not ringing.
;
; For the sake of backwards-compatibility, the joinempty and leavewhenempty
; options also accept the strings "yes" "no" "strict" and "loose". The following
; serves as a translation for these values:
;
; yes - (empty) for joinempty; penalty,paused,invalid for leavewhenempty
; no - penalty,paused,invalid for joinempty; (empty) for leavewhenempty
; strict - penalty,paused,invalid,unavailable
; loose - penalty,invalid
;

joinempty=yes

; If this is set to yes, the following manager events will be generated:
; AgentCalled, AgentDump, AgentConnect, AgentComplete; setting this to
; vars also sends all channel variables with the event.
; (may generate some extra manager events, but probably ones you want)
;
; eventwhencalled = yes|no|vars
;
; If this is set to yes, the following manager events will be generated:
; QueueMemberStatus
; (may generate a WHOLE LOT of extra manager events)
; The default value is yes and this can not be set globally.
;
; eventmemberstatus = no
;
; If you wish to report the caller's hold time to the member before they are
; connected to the caller, set this to yes.
;
; reportholdtime = no
;
; If you want the queue to avoid sending calls to members whose devices are
; known to be 'in use' (via the channel driver supporting that device state)
; uncomment this option. This can be controlled on a per member basis by
; setting 'ringinuse' on that member. This can be done in the member definition,
; in the 'ringinuse' field on a realtime member, via the QUEUE_MEMBER dialplan
; function, or with CLI/AMI. By default, the per member value will be the same
; as the queue's ringinuse value if it isn't set on the member deliberately.
; (Note: only the SIP channel driver currently is able to report 'in use'.)
; ringinuse = no
;
; If you wish to have a delay before the member is connected to the caller (or
; before the member hears any announcement messages), set this to the number of
; seconds to delay.
;
; memberdelay = 0
;
; If timeoutrestart is set to yes, then the timeout for an agent to answer is
; reset if a BUSY or CONGESTION is received.  This can be useful if agents
; are able to cancel a call with reject or similar.
;
; timeoutrestart = no
;
; If you wish to implement a rule defined in queuerules.conf (see
; configs/queuerules.conf.sample from the asterisk source directory for
; more information about penalty rules) by default, you may specify this
; by setting defaultrule to the rule's name
;
; defaultrule = myrule
;
; Each member of this call queue is listed on a separate line in
; the form technology/dialstring.  "member" means a normal member of a
; queue.  An optional penalty may be specified after a comma, such that
; entries with higher penalties are considered last.  An optional member
; name may also be specified after a second comma, which is used in log
; messages as a "friendly name".  Multiple interfaces may share a single
; member name. An optional state interface may be specified after a third
; comma. This interface will be the one for which app_queue receives device
; state notifications, even though the first interface specified is the one
; that is actually called.
;
; A hint can also be used in place of the state interface using the format
; hint:<extension>@<context>. If no context is specified then 'default' will
; be used.
;
; It is important to ensure that channel drivers used for members are loaded
; before app_queue.so itself or they may be marked invalid until reload. This
; can be accomplished by explicitly listing them in modules.conf before
; app_queue.so.  Additionally, if you use Local channels as queue members, you
; must also preload pbx_config.so and chan_local.so (or pbx_ael.so, pbx_lua.so,
; or pbx_realtime.so, depending on how your dialplan is configured).
;
; syntax: member => interface,[,penalty][,membername][,state_interface][,ringinuse]
;
;member => DAHDI/1
;member => DAHDI/2,10
;member => DAHDI/3,10,Bob Johnson
;member => Agent/1001
;member => Agent/1002
;member => Local/1000@default,0,John Smith,SIP/1000
;member => Local/2000@default,0,Lorem Ipsum,SIP/2000,no

;member => SIP/jhernandez,0,Jose Hernandez
;member => Local/1000@fun-godzilla,0,Bay Haj

;
; Note that using agent groups is probably not what you want.  Strategies do
; not propagate down to the Agent system so if you want round robin, least
; recent, etc, you should list all the agents in this file individually and not
; use agent groups.
;
;member => Agent/@1		; Any agent in group 1
;member => Agent/:1,1		; Any agent in group 1, wait for first
                                ; available, but consider with penalty

;queue prueba anthony
[q_test]
strategy = ringall
joinempty = yes
musiconhold = default

member => SIP/7777,0,Agent00
;queque num extern from tunk
member => Dial/fiorella_1/7722333786,0,Agent1


[q_deepmachine]
strategy = ringall
joinempty = yes
music = default
;musiconhold = default

member => SIP/6073,0,Agent00
member => SIP/6061,0,Agent02
member => SIP/6063,0,Agent04
member => SIP/6064,0,Agent05
member => SIP/6065,0,Agent012
member => SIP/6057,0,Agent06
member => SIP/6068,0,Agent08
member => SIP/6069,0,Agent09
member => SIP/6068,0,Agent10
member => SIP/6071,0,Agent11
;member => SIP/jhernandez,0,Jose Hernandez


[q_codemachine]
strategy = ringall
joinempty = yes
music = default
;funciona
;musiconhold = hold_codemachine

member => SIP/3000,0,Agent00
member => SIP/3010,0,Agent11
;member => SIP/jhernandez,0,Jose Hernandez




[q_chuma]
strategy = ringall
joinempty = yes

member => SIP/8000,0,Agent00
member => SIP/prueba006,0,Agent02
;member => SIP/jhernandez,0,Jose Hernandez
member => SIP/tony,0,Agent00


[fiorella]
strategy = ringall
joinempty = yes
musiconhold = default

member => Local/102@fun-sparta,0,Agent1
member => Local/103@fun-sparta,0,Agent2
member => Local/104@fun-sparta,0,Agent3
member => Local/105@fun-sparta,0,Agent4
member => Local/107@fun-sparta,0,Agent5
member => Local/109@fun-sparta,0,Agent6
member => Local/110@fun-sparta,0,Agent7
member => Local/111@fun-sparta,0,Agent8
member => Local/112@fun-sparta,0,Agent9
member => Local/113@fun-sparta,0,Agent10
member => Local/114@fun-sparta,0,Agent11
member => Local/115@fun-sparta,0,Agent12
member => Local/117@fun-sparta,0,Agent13
member => Local/119@fun-sparta,0,Agent14
member => Local/120@fun-sparta,0,Agent15
member => Local/121@fun-sparta,0,Agent16
member => Local/122@fun-sparta,0,Agent17
member => Local/123@fun-sparta,0,Agent18
member => Local/127@fun-sparta,0,Agent19
member => Local/130@fun-sparta,0,Agent20
member => Local/301@fun-sparta,0,Agent21
member => Local/401@fun-sparta,0,Agent22
member => Local/402@fun-sparta,0,Agent23
member => Local/403@fun-sparta,0,Agent24
member => Local/404@fun-sparta,0,Agent25
member => Local/405@fun-sparta,0,Agent26
member => Local/406@fun-sparta,0,Agent27
member => Local/407@fun-sparta,0,Agent28
member => Local/408@fun-sparta,0,Agent29
member => Local/415@fun-sparta,0,Agent30
member => Local/417@fun-sparta,0,Agent31
member => Local/418@fun-sparta,0,Agent32
member => Local/419@fun-sparta,0,Agent33
member => Local/423@fun-sparta,0,Agent34
member => Local/425@fun-sparta,0,Agent35
member => Local/427@fun-sparta,0,Agent36
member => Local/428@fun-sparta,0,Agent37
member => Local/429@fun-sparta,0,Agent38
member => Local/431@fun-sparta,0,Agent39
member => Local/432@fun-sparta,0,Agent40
member => Local/433@fun-sparta,0,Agent41
member => Local/434@fun-sparta,0,Agent42
member => Local/437@fun-sparta,0,Agent43
member => Local/440@fun-sparta,0,Agent44
member => Local/441@fun-sparta,0,Agent45
member => Local/444@fun-sparta,0,Agent46
member => Local/446@fun-sparta,0,Agent47
member => Local/448@fun-sparta,0,Agent48
member => Local/449@fun-sparta,0,Agent49
member => Local/451@fun-sparta,0,Agent50
member => Local/455@fun-sparta,0,Agent51
member => Local/456@fun-sparta,0,Agent52
member => Local/457@fun-sparta,0,Agent53
member => Local/458@fun-sparta,0,Agent54
member => Local/459@fun-sparta,0,Agent55
member => Local/460@fun-sparta,0,Agent56
member => Local/463@fun-sparta,0,Agent57
member => Local/464@fun-sparta,0,Agent58
member => Local/465@fun-sparta,0,Agent59
member => Local/466@fun-sparta,0,Agent60
member => Local/467@fun-sparta,0,Agent61
member => Local/468@fun-sparta,0,Agent62
member => Local/469@fun-sparta,0,Agent63
member => Local/470@fun-sparta,0,Agent64
member => Local/471@fun-sparta,0,Agent65
member => Local/473@fun-sparta,0,Agent66
member => Local/474@fun-sparta,0,Agent67
member => Local/475@fun-sparta,0,Agent68
member => Local/476@fun-sparta,0,Agent69
member => Local/477@fun-sparta,0,Agent70
member => Local/478@fun-sparta,0,Agent71
member => Local/479@fun-sparta,0,Agent72
member => Local/480@fun-sparta,0,Agent73
member => Local/601@fun-sparta,0,Agent74
member => Local/602@fun-sparta,0,Agent75
member => Local/603@fun-sparta,0,Agent76
member => Local/604@fun-sparta,0,Agent77
member => Local/606@fun-sparta,0,Agent78
member => Local/607@fun-sparta,0,Agent79
member => Local/608@fun-sparta,0,Agent80
member => Local/610@fun-sparta,0,Agent81
member => Local/612@fun-sparta,0,Agent82
member => Local/613@fun-sparta,0,Agent83
member => Local/614@fun-sparta,0,Agent84
member => Local/616@fun-sparta,0,Agent85
member => Local/619@fun-sparta,0,Agent86
member => Local/622@fun-sparta,0,Agent87
member => Local/624@fun-sparta,0,Agent88
member => Local/625@fun-sparta,0,Agent89
member => Local/626@fun-sparta,0,Agent90
member => Local/628@fun-sparta,0,Agent91
member => Local/629@fun-sparta,0,Agent92
member => Local/632@fun-sparta,0,Agent93
member => Local/633@fun-sparta,0,Agent94
member => Local/634@fun-sparta,0,Agent95
member => Local/635@fun-sparta,0,Agent96
member => Local/636@fun-sparta,0,Agent97
member => Local/637@fun-sparta,0,Agent98
member => Local/639@fun-sparta,0,Agent99
member => Local/643@fun-sparta,0,Agent100
member => Local/644@fun-sparta,0,Agent101
member => Local/645@fun-sparta,0,Agent102
member => Local/646@fun-sparta,0,Agent103
member => Local/647@fun-sparta,0,Agent104
member => Local/648@fun-sparta,0,Agent105
member => Local/650@fun-sparta,0,Agent106
member => Local/651@fun-sparta,0,Agent107
member => Local/652@fun-sparta,0,Agent108
member => Local/653@fun-sparta,0,Agent109
member => Local/654@fun-sparta,0,Agent110
member => Local/656@fun-sparta,0,Agent111
member => Local/658@fun-sparta,0,Agent112
member => Local/659@fun-sparta,0,Agent113
member => Local/661@fun-sparta,0,Agent114
member => Local/662@fun-sparta,0,Agent115
member => Local/664@fun-sparta,0,Agent116
member => Local/667@fun-sparta,0,Agent117
member => Local/668@fun-sparta,0,Agent118
member => Local/669@fun-sparta,0,Agent119
member => Local/673@fun-sparta,0,Agent120
member => Local/675@fun-sparta,0,Agent121
member => Local/676@fun-sparta,0,Agent122
member => Local/677@fun-sparta,0,Agent123
member => Local/678@fun-sparta,0,Agent124
member => Local/679@fun-sparta,0,Agent125
member => Local/680@fun-sparta,0,Agent126
member => Local/685@fun-sparta,0,Agent127
member => Local/688@fun-sparta,0,Agent128
member => Local/689@fun-sparta,0,Agent129
member => Local/690@fun-sparta,0,Agent130
member => Local/691@fun-sparta,0,Agent131
member => Local/692@fun-sparta,0,Agent132
member => Local/693@fun-sparta,0,Agent133
member => Local/694@fun-sparta,0,Agent134
member => Local/695@fun-sparta,0,Agent135
member => Local/696@fun-sparta,0,Agent136
member => Local/697@fun-sparta,0,Agent137
member => Local/698@fun-sparta,0,Agent138
member => Local/700@fun-sparta,0,Agent139
member => Local/702@fun-sparta,0,Agent140
member => Local/704@fun-sparta,0,Agent141
member => Local/705@fun-sparta,0,Agent142
member => Local/707@fun-sparta,0,Agent143
member => Local/708@fun-sparta,0,Agent144
member => Local/709@fun-sparta,0,Agent145
member => Local/710@fun-sparta,0,Agent146
member => Local/711@fun-sparta,0,Agent147
member => Local/713@fun-sparta,0,Agent148
member => Local/714@fun-sparta,0,Agent149
member => Local/900@fun-sparta,0,Agent150
member => Local/901@fun-sparta,0,Agent151
member => Local/902@fun-sparta,0,Agent152
member => Local/903@fun-sparta,0,Agent153
member => Local/904@fun-sparta,0,Agent154
member => Local/905@fun-sparta,0,Agent155
member => Local/906@fun-sparta,0,Agent156
member => Local/907@fun-sparta,0,Agent157
member => Local/908@fun-sparta,0,Agent158
member => Local/909@fun-sparta,0,Agent159
member => Local/910@fun-sparta,0,Agent160
member => Local/912@fun-sparta,0,Agent161
member => Local/913@fun-sparta,0,Agent162
member => Local/914@fun-sparta,0,Agent163
member => Local/915@fun-sparta,0,Agent164
member => Local/917@fun-sparta,0,Agent165
member => Local/918@fun-sparta,0,Agent166
member => Local/919@fun-sparta,0,Agent167
member => Local/920@fun-sparta,0,Agent168
member => Local/921@fun-sparta,0,Agent167
member => Local/930@fun-sparta,0,Agent168
member => Local/958@fun-sparta,0,Agent169


